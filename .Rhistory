if (is.null(minmax)) {
minimo <- min(a)
maximo <- max(a)
}
else {
minimo <- minmax[1]
maximo <- minmax[2]
}
if (length(unique(df[, var2])) > max.cont) {
v <- as.data.frame(table(cut(df[, var2], seq(minimo, maximo, length.out = 100), include.lowest = T), df[, var1]))
}
else {
v <- as.data.frame(table(df[, var2], df[, var1]))
}
if (length(unique(v$Var1)) <= length(unique(v$Var2))) {
xt <- unique(v$Var1)
var <- "Var1"
vir <- "Var2"
}
else {
xt <- unique(v$Var2)
var <- "Var2"
vir <- "Var1"
}
list <- list()
for (i in 1:length(xt)) {
list[[i]] <- v[v[, var] == xt[i], ]
}
J <- list[[1]]
for (i in 1:(length(list) - 1)) {
J <- dplyr::left_join(J, list[[i + 1]], by = vir)
}
sumas <- rowSums(J[, startsWith(names(J), "Freq")])
porcent <- J
proporciones <- J[, (startsWith(names(J), "Freq"))]/sumas
for (y in 1:ncol(proporciones)) {
names(proporciones)[y] <- paste(var1, "=", unique(v$Var2)[y])
}
porcent <- cbind(porcent, proporciones)
names(porcent)[1] <- paste("Intervalo", var2, "")
if (plot) {
names(df)[1] <- "var1"
names(df)[2] <- "var2"
plot_2 <- ggplot2::ggplot(df, aes(var1, var2)) + geom_violin(aes(fill = var1)) + geom_boxplot(width = 0.2, alpha = 0.2, color = "red")
}
return(list(porcent, plot_2))
}
VS <- Versus(df = iris, var1 = "Sepal.Length", var2 = "Species", plot = T)
VS[[1]]
#'
#' @import ggplot2 ggplot, geom_violin, geom_boxplot, aes
#'
#' @examples
#'
#' data(iris)
#' VS <- Versus(df = iris, var1 = "Sepal.Length", var2 = "Species", plot = T)
#'
#' VS[[1]]
#'
Versus <- function(df, var1 = names(df)[1], var2 = names(df)[2], minmax = NULL, plot = TRUE, disc = TRUE, min.disc = 20, max.cont = 500) {
NV1 <- is.numeric(var1)
NV2 <- is.numeric(var2)
FV1 <- is.factor(var1)
FV2 <- is.factor(var2)
if (length(unique(df[, var1])) > min.disc) {
return(invisible())
}
a <- df[, var2]
if (is.null(minmax)) {
minimo <- min(a)
maximo <- max(a)
}
else {
minimo <- minmax[1]
maximo <- minmax[2]
}
if (length(unique(df[, var2])) > max.cont) {
v <- as.data.frame(table(cut(df[, var2], seq(minimo, maximo, length.out = 100), include.lowest = T), df[, var1]))
}
else {
v <- as.data.frame(table(df[, var2], df[, var1]))
}
if (length(unique(v$Var1)) <= length(unique(v$Var2))) {
xt <- unique(v$Var1)
var <- "Var1"
vir <- "Var2"
}
else {
xt <- unique(v$Var2)
var <- "Var2"
vir <- "Var1"
}
list <- list()
for (i in 1:length(xt)) {
list[[i]] <- v[v[, var] == xt[i], ]
}
J <- list[[1]]
for (i in 1:(length(list) - 1)) {
J <- dplyr::left_join(J, list[[i + 1]], by = vir)
}
sumas <- rowSums(J[, startsWith(names(J), "Freq")])
porcent <- J
proporciones <- J[, (startsWith(names(J), "Freq"))]/sumas
for (y in 1:ncol(proporciones)) {
names(proporciones)[y] <- paste(var1, "=", unique(v$Var2)[y])
}
porcent <- cbind(porcent, proporciones)
names(porcent)[1] <- paste("Intervalo", var2, "")
if (plot) {
names(df)[1] <- "var1"
names(df)[2] <- "var2"
plot_2 <- ggplot2::ggplot(df, aes(var1, var2)) + geom_violin(aes(fill = var1)) + geom_boxplot(width = 0.2, alpha = 0.2, color = "red")
}
return(list(porcent, plot_2))
}
data(iris)
VS <- Versus(df = iris, var1 = "Sepal.Length", var2 = "Species", plot = T)
VS
View(TSA::periodogram)
library(TSA)
library("TSA")
library(TSA)
install.packages("TSA")
View(TSA::periodogram)
View(TSA::spec)
#'
#'
#' #create folder
#'
#' #create file
#' lib<-getwd()
#'
#' read_all(lib)
#'
#'
read_all <- function(dir = getwd()) {
lt <- list.files(dir)
SPL <- do.call(c, purrr::map(lt, ~strsplit(.x, ".", fixed = TRUE)))
len <- purrr::map_int(SPL, ~unlist(length(.x)))
Reed <- lt[len > 1]
Repeat <- lt[len == 1]
if (length(Repeat) > 0) {
read_all(Repeat)
}
if (length(Reed) > 0) {
txt <- Reed[endsWith(Reed, ".txt")]
csv <- Reed[endsWith(Reed, "csv")]
dir_txt <- paste0(dir, "/", txt)
dir_csv <- paste0(dir, "/", csv)
readd <- function(tt, dir_) {
i <- 0
if (length(tt) > 0) {
for (t in 1:length(tt)) {
cname <- gsub(" ", "_", tt[t])
ann <- dir_[t]
Leer <- try(read.csv(dir_[t]))
if (assertthat::is.error(Leer)) {
Leer <- "Reading error"
}
return(assign(x = substr(cname, 1, nchar(cname) - 4), value = Leer, envir = globalenv()))
}
}
}
if (length(txt) > 0) {
readd(txt, dir_txt)
}
if (length(csv) > 0) {
readd(csv, dir_csv)
}
}
invisible()
}
lib<-getwd()
lib
read_all(lib)
library(purrr)
install.packages("purrr")
read_all(lib)
dir = getwd()
SPL <- do.call(c, purrr::map(lt, ~strsplit(.x, ".", fixed = TRUE)))
lt <- list.files(dir)
lt
SPL <- do.call(c, purrr::map(lt, ~strsplit(.x, ".", fixed = TRUE)))
len <- purrr::map_int(SPL, ~unlist(length(.x)))
Reed <- lt[len > 1]
Repeat <- lt[len == 1]
if (length(Repeat) > 0) {
read_all(Repeat)
}
Reed
dir
lt <- list.files(dir)
SPL <- do.call(c, purrr::map(lt, ~strsplit(.x, ".", fixed = TRUE)))
len <- purrr::map_int(SPL, ~unlist(length(.x)))
Reed <- lt[len > 1]
Repeat <- lt[len == 1]
Repeat
#'
#'
#' #create folder
#'
#' #create file
#' lib<-getwd()
#'
#' read_all(lib)
#'
#'
read_all <- function(dir = getwd()) {
lt <- list.files(dir)
SPL <- do.call(c, purrr::map(lt, ~strsplit(.x, ".", fixed = TRUE)))
len <- purrr::map_int(SPL, ~unlist(length(.x)))
Reed <- lt[len > 1]
Repeat <- lt[len == 1]
if (length(Repeat) > 0) {
read_all(Repeat)
}
if (length(Reed) > 0) {
txt <- Reed[endsWith(Reed, ".txt")]
csv <- Reed[endsWith(Reed, "csv")]
dir_txt <- paste0(dir, "/", txt)
dir_csv <- paste0(dir, "/", csv)
readd <- function(tt, dir_) {
i <- 0
if (length(tt) > 0) {
for (t in 1:length(tt)) {
cname <- gsub(" ", "_", tt[t])
ann <- dir_[t]
Leer <- try(read.csv(dir_[t]))
if (assertthat::is.error(Leer)) {
Leer <- "Reading error"
}
return(assign(x = substr(cname, 1, nchar(cname) - 4), value = Leer, envir = globalenv()))
}
}
}
if (length(txt) > 0) {
readd(txt, dir_txt)
}
if (length(csv) > 0) {
readd(csv, dir_csv)
}
}
invisible()
}
read_all(lib)
1
Read_docs <- function(dir = getwd(), text_, deep = 2, word_pdf_omit = T) {
if (missing(text_)) {
warning("text_ must have a value")
return(invisible())
}
lt <- list.files(dir)
SPL <- do.call(c, map(lt, ~strsplit(.x, ".", fixed = TRUE)))
len <- map_int(SPL, ~unlist(length(.x)))
SPL <- SPL[len > 1]
Reed <- lt[len > 1]
Reed <- Reed[purrr::map_lgl(SPL, ~"R" %in% .x[[2]] | "txt" %in% .x[[2]] | "pdf" %in% .x[[2]])]
Repeat <- lt[len == 1]
Doovs <- data.frame(Doc = 1, Loc = 1, Text = 1)[-1, ]
Doov <- data.frame(Doc = 1, Loc = 1, Text = 1)[-1, ]
if (length(Repeat) > 0 & deep > 1) {
for (i in 1:length(Repeat)) {
Doov = rbind(Doov, Read_docs(dir = paste0(dir, "/", Repeat[i]), text_))
}
}
if (length(Reed) > 0) {
txt <- Reed[endsWith(Reed, ".txt") | endsWith(Reed, "R") | endsWith(Reed, "pdf") | endsWith(Reed, "docx")]
dir_txt <- paste0(dir, "/", txt)
readd <- function(tt, dir_, text_. = text_) {
i <- 0
if (length(tt) > 0) {
for (t in 1:length(tt)) {
formato <- strsplit(tt, ".", fixed = T)[[1]][2]
if (formato == "docx" & !word_pdf_omit) {
Leer <- try(read_docx(dir_[t]), silent = T)
}
else if (formato == "pdf" & !word_pdf_omit) {
Leer <- try(read_pdf(dir_[t])$text, silent = T)
}
else {
Leer <- try(readChar(, file.info(dir_[t])$size), silent = T)
}
if (is.error(Leer)) {
Leer <- try(read_file(dir_[t]))
if (is.error(Leer)) {
Leer <- ""
}
}
return(c(dir_, grepl(text_, Leer)))
}
}
}
for (i in 1:length(txt)) {
Info = readd(txt[i], dir_txt[i])
Doovs <- rbind(Doovs, data.frame(Doc = txt[i], Loc = Info[1], Text = Info[2]))
}
}
if (nrow(Doov) > 0) {
return(rbind(Doov, Doovs))
}
else {
return(Doovs)
}
}
dir
Read_docs()
proporciones <- c(4, 2)
valores <- c(4, 8)
cortes <- c(1, 5, 10)
proporciones
replacemet(1, valores, cortes)
replacemet(5, valores, cortes)
replacemet(10, valores, cortes)
replacemet(.1, valores, cortes)
replacemet(proporciones, valores, cortes)
replacemet(10, values, limits)
#' replacemet(1, values, limits)
#'
#' replacemet(5, values, limits)
#'
#' replacemet(10, values, limits)
#'
#' replacemet(X, values, limits)
#'
#'
#'
replacemet <- function(X, values, limits) {
a <- c()
for (i in 1:(length(limits) + 1)) {
a <- ifelse(X < limits[i + 1] & X >= limits[i], values[i], NaN)
ifelse(is.na(a), a <- ifelse(X < limits[i + 1] & X >= limits[i], values[i], NaN), (break)())
}
return(a)
}
replacemet(1, values, limits)
X <- c(4, 2)
values <- c(4, 8)
limits <- c(1, 5, 10)
replacemet(1, values, limits)
replacemet(5, values, limits)
replacemet(10, values, limits)
values <- c(0, 4, 8, 12)
replacemet(1, values, limits)
replacemet(5, values, limits)
replacemet(10, values, limits)
values <- c(4, 8)
X <- c(4, 2)
replacemet(X, values, limits)
X <- c(0, 3, 7, 14)
replacemet(X, values, limits)
limits
values
X <- c(0, 3, 7, 14)
replacemet(X, values, limits)
limits
replacemet(1, values, limits)
X <- c(0.5, 3, 7, 14)
replacemet(X, values, limits)
X <- c(1.5, 3, 7, 14)
replacemet(X, values, limits)
limits
replacemet(5, values, limits)
X <- c(1.5, 3, 6, 14)
replacemet(X, values, limits)
values
values
limits
values <- c(4, 8)
limits <- c(1, 5, 10)
values
limits
X <- c(1.5, 3, 6, 14)
replacemet(X, values, limits)
a <- c()
for (i in 1:(length(limits) + 1)) {
a <- ifelse(X < limits[i + 1] & X >= limits[i], values[i], NaN)
ifelse(is.na(a), a <- ifelse(X < limits[i + 1] & X >= limits[i], values[i], NaN), (break)())
}
limits
i
(length(limits) + 1)
ifelse(X < limits[i + 1] & X >= limits[i], values[i], NaN)
i
limits[i + 1]
X
X >= limits[i]
limits[i]
limits[i + 1]
values[i]
X < limits[i + 1] & X >= limits[i]
ifelse(X < limits[i + 1] & X >= limits[i], values[i], NaN)
a <- ifelse(X < limits[i + 1] & X >= limits[i], values[i], NaN)
is.na(a)
is.na(NA)
X < limits[i + 1] & X >= limits[i]
values[i]
X < limits[i + 1] & X >= limits[i]
a <- ifelse(X < limits[i + 1] & X >= limits[i], values[i], NA)
a
is.na(a)
any(is.na(a))
limits
limits[i + 1]
i
limits
values
limits[i]
X < limits[i + 1] & X >= limits[i]
X < limits[i + 1] & X >= limits[i]
X
limits
length(limits)
(length(limits) - 1)
i
limits
values
length(values)!=(length(limits)-1)
limits[i + 1]
a <- ifelse(X < limits[i + 1] & X >= limits[i], values[i], NA)
limits[i]
a <- ifelse(X < limits[i + 1] & X >= limits[i], values[i], NA)
a
a <- ifelse(X < limits[i + 1] & X >= limits[i], values[i], NA)
a
any(is.na(a))
i
i<-2
ifelse(X < limits[i + 1] & X >= limits[i], values[i], NA)
X < limits[i + 1] & X >= limits[i]
cond
cond<-X < limits[i + 1] & X >= limits[i]
cond
a <- rep(NA,length(X))
a
for (i in 1:(length(limits) - 1)) {
cond<-X < limits[i + 1] & X >= limits[i]
a[cond] <- values[i]
if(!any(is.na(a))){
break()
}
# if(is.na(a)){
#   a <- ifelse(X < limits[i + 1] & X >= limits[i], values[i], NA)
# }else{(break)}
}
a
X
X <- c(0, 3, 6, 14)
replacemet(X, values, limits)
replacemet
#'
#' replacemet(5, values, limits)
#'
#' replacemet(10, values, limits)
#'
#'
#' X <- c(0, 3, 6, 14)
#' replacemet(X, values, limits)
#'
#'
replacemet <- function(X, values, limits) {
lv<-length(values)
ll<-length(limits)
lx<-length(X)
if(lv!=(ll-1)){
warning("limits must have the same length that values + 1")
return(invisible())
}
a <- rep(NA,lx)
for (i in 1:(ll - 1)) {
cond<-X < limits[i + 1] & X >= limits[i]
a[cond] <- values[i]
if(!any(is.na(a))){
break()
}
}
return(a)
}
X <- c(0, 3, 6, 14)
replacemet(X, values, limits)
limits
#'
#' replacemet(5, values, limits)
#'
#' replacemet(10, values, limits)
#'
#'
#' X <- c(0, 3, 6, 14)
#' replacemet(X, values, limits)
#'
#'
replacemet <- function(X, values, limits, include_all=TRUE) {
lv<-length(values)
ll<-length(limits)
lx<-length(X)
if(lv!=(ll-1)){
warning("limits must have the same length that values + 1")
return(invisible())
}
if(include_all){
limits[1]<- -Inf
limits[ll]<- Inf
}
a <- rep(NA,lx)
for (i in 1:(ll - 1)) {
cond<-X < limits[i + 1] & X >= limits[i]
a[cond] <- values[i]
if(!any(is.na(a))){
break()
}
}
return(a)
}
