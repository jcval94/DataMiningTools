duplicated(df1)
#'
#' @importFrom purrr map_lgl
#'
#' @examples
#'
#' data(iris)
#' iris[["A"]] <- 0
#' head(iris)
#' head(drop.df(iris))
#'
drop.df <- function(df) {
df1<-df[, purrr::map_lgl(df, ~length(unique(.x)) > 1)]
df1<-df1[!duplicated(df1),]
df1<-dft(df1)
df1<-df[, purrr::map_lgl(df, ~length(unique(.x)) > 1)]
df1<-df1[!duplicated(df1),]
dft(df1)
}
data(iris)
iris[["A"]] <- 0
head(iris)
head(drop.df(iris))
#'
#' @importFrom purrr map_lgl
#'
#' @examples
#'
#' data(iris)
#' iris[["A"]] <- 0
#' head(iris)
#' head(drop.df(iris))
#'
drop.df <- function(df) {
df1<-df[, purrr::map_lgl(df, ~length(unique(.x)) > 1)]
df1<-df1[!duplicated(df1),]
df1<-dft(df1)
df1<-df[, purrr::map_lgl(df, ~length(unique(.x)) > 1)]
df1<-df1[!duplicated(df1),]
dft(df1)
}
head(drop.df(iris))
#' @importFrom dplyr as_tibble
#'
#' @examples
#'
#' data(iris)
#' Transpose <- dft(iris)
#'
#' View(Transpose)
#'
#'
dft <- function(df) {
cl<-class(df)
if(! "data.frame" %in% cl){warning("object must be a data.frame")
return(invisible())
}
if (cl %in% "tibble") {
Tib <- TRUE
}
else {
Tib <- FALSE
}
df_1 <- as.data.frame(t(df))
names(df_1) <- row.names(df)
if (Tib) {
return(dplyr::as_tibble(df_1))
}
else {
return(df_1)
}
}
head(drop.df(iris))
#'
#' @importFrom purrr map_lgl
#'
#' @examples
#'
#' data(iris)
#' iris[["A"]] <- 0
#' head(iris)
#' head(drop.df(iris))
#'
drop.df <- function(df) {
df1<-df[, purrr::map_lgl(df, ~length(unique(.x)) > 1)]
df1<-df1[!duplicated(df1),]
df1<-dft(df1)
df1<-df[, purrr::map_lgl(df, ~length(unique(.x)) > 1)]
df1<-df1[!duplicated(df1),]
return(dft(df1))
}
head(drop.df(iris))
#'
#' @importFrom purrr map_lgl
#'
#' @examples
#'
#' data(iris)
#' iris[["A"]] <- 0
#' head(iris)
#' head(drop.df(iris))
#'
drop.df <- function(df) {
df1<-df[, purrr::map_lgl(df, ~length(unique(.x)) > 1)]
df1<-df1[!duplicated(df1),]
df1<-dft(df1)
df1<-df[, purrr::map_lgl(df, ~length(unique(.x)) > 1)]
df1<-df1[!duplicated(df1),]
return(df1)
}
head(drop.df(iris))
data(iris)
iris[["A"]] <- 0
head(iris)
head(drop.df(iris))
#'
#' @importFrom purrr map_lgl
#'
#' @examples
#'
#' data(iris)
#' iris[["A"]] <- 0
#' head(iris)
#' head(drop.df(iris))
#'
drop.df <- function(df) {
df1<-df[, purrr::map_lgl(df, ~length(unique(.x)) > 1)]
df1<-df1[!duplicated(df1),]
df1<-dft(df1)
df1<-df1[, purrr::map_lgl(df1, ~length(unique(.x)) > 1)]
df1<-df1[!duplicated(df1),]
return(dft(df1))
}
head(drop.df(iris))
#' @export
#'
#' @examples
#'
#' proporciones <- c(4, 2)
#' valores <- c(4, 8)
#' cortes <- c(1, 5, 10)
#'
#' escoger(1, valores, cortes)
#'
escoger <- function(persona1, valores, cortes) {
a <- c()
for (i in 1:(length(cortes) + 1)) {
a <- ifelse(persona1 < cortes[i + 1] & persona1 >= cortes[i], valores[i], NaN)
ifelse(is.na(a), a <- ifelse(persona1 < cortes[i + 1] & persona1 >= cortes[i], valores[i], NaN), (break)())
}
return(a)
}
proporciones <- c(4, 2)
valores <- c(4, 8)
cortes <- c(1, 5, 10)
replacemet(1, valores, cortes)
#' @export
#'
#' @examples
#'
#' proporciones <- c(4, 2)
#' valores <- c(4, 8)
#' cortes <- c(1, 5, 10)
#'
#' replacemet(1, valores, cortes)
#'
replacemet <- function(persona1, valores, cortes) {
a <- c()
for (i in 1:(length(cortes) + 1)) {
a <- ifelse(persona1 < cortes[i + 1] & persona1 >= cortes[i], valores[i], NaN)
ifelse(is.na(a), a <- ifelse(persona1 < cortes[i + 1] & persona1 >= cortes[i], valores[i], NaN), (break)())
}
return(a)
}
replacemet(1, valores, cortes)
persona1
replacemet(1, valores, cortes)
replacemet(3, valores, cortes)
replacemet(6, valores, cortes)
replacemet(5, valores, cortes)
replacemet(10, valores, cortes)
replacemet(.1, valores, cortes)
#' replacemet(1, valores, cortes)
#'
#' replacemet(5, valores, cortes)
#'
#' replacemet(10, valores, cortes)
#'
#' replacemet(.1, valores, cortes)
#'
#'
#'
replacemet <- function(X, valores, cortes) {
valores<-c(-Inf,valores,Inf)
a <- c()
for (i in 1:(length(cortes) + 1)) {
a <- ifelse(X < cortes[i + 1] & X >= cortes[i], valores[i], NaN)
ifelse(is.na(a), a <- ifelse(X < cortes[i + 1] & X >= cortes[i], valores[i], NaN), (break)())
}
return(a)
}
replacemet(1, valores, cortes)
replacemet(5, valores, cortes)
replacemet(10, valores, cortes)
replacemet(.1, valores, cortes)
a<-t.test(rnorm(!00))
a<-t.test(rnorm(100))
a
quantile(b, 0.25, na.rm = TRUE)
b<-rnorm(!000)
b<-rnorm(1000)
quantile(b, na.rm = TRUE)
min(b)
quantile(a)
quantile(b, na.rm = TRUE)
as.data.frame(quantile(b, na.rm = TRUE))
est1<-as.list(quantile(b, na.rm = TRUE))
est1
est3<-t.test(b)
est3
class(est3)
est3$statistic
est3$parameter
est3$estimate
est3$conf.int
est3$conf.int[1]
est3$p.value
est3$statistic
R<-c(rnormal(500,0,1/2),rweibull(500,1,3/4))
plot(R)
R<-c(rnorm(500,0,1/2),rweibull(500,1,3/4))
plot(R)
plot(density(R))
R<-c(rnorm(500,0,1/2),rweibull(500,2,3/4))
plot(density(R))
R<-c(rnorm(500,0,1/2),rweibull(500,5,3/4))
plot(density(R))
R<-c(rnorm(500,0,1),rweibull(500,5,3/4))
plot(density(R))
R<-c(rnorm(500,0,1/4),rweibull(500,5,3/4))
plot(density(R))
R<-c(rexp(500,4),rweibull(500,5,3/4))
plot(density(R))
R<-c(rexp(500,4),rweibull(500,5,1/4))
plot(density(R))
R<-c(rexp(500,4),rweibull(500,5,2))
plot(density(R))
R<-c(rexp(500,4),rweibull(500,5,3))
plot(density(R))
plot(densityplot(r)
plot(densityplot(R))
plot(density(R))
R<-c(rexp(500,4),rweibull(500,5,3))
plot(density(R))
X<-R
gen=1
Cont=TRUE
plot=FALSE
p.val_min=.05
criteria=2
DPQR=T
if(missing(inputNA)){X<-na.omit(X)}
if(length(X)==0){
return(NULL)
}
if (length(unique(X))<2) {
fun_g<-function(n=gen){return(rep(X[1],n))}
return(list(paste0("norm(",X[1],",0)"),fun_g,rep(X[1],gen),data.frame(Dist="norm",AD_p.v=1,KS_p.v=1,estimate1=X[1],estimate2=0,estimateLL1=0,estimateLL2=1,PV_S=2),NULL))
}
if(prod(X==floor(X))==1){
Cont<-FALSE
}
if (length(unique(X))==2) {
X<-sort(X)
p<-length(X[X==unique(X)[2]])/length(X)
gene<-rbinom
formals(gene)[1]<-length(X)
formals(gene)[2]<-1
formals(gene)[3]<-p
distribu<-paste0("binom(",p,")")
MA=gene(n = gen)
if(plot){
DF<-rbind(data.frame(A="Fit",DT=MA),
data.frame(A="Real",DT=X))
pl <- ggplot2::ggplot(DF,ggplot2::aes(x=DF$DT,fill=DF$A)) + ggplot2::geom_density(alpha=0.4) +ggplot2::ggtitle(distribu)
}else{
pl<-NULL
}
return(list(distribu,gene,MA[1:gen],data.frame(Dist="binom",AD_p.v=1,KS_p.v=1,estimate1=1,estimate2=p,estimateLL1=0,estimateLL2=1,PV_S=2),pl))
}
DIS<-list(Nombres=c("exp","pois","beta","gamma","lnorm","norm","weibull","nbinom","hyper","cauchy","binom"),
p=c(stats::pexp,stats::ppois,stats::pbeta,stats::pgamma,stats::plnorm,stats::pnorm,stats::pweibull,stats::pnbinom,stats::phyper,stats::pcauchy,stats::pbinom),
d=c(stats::dexp,stats::dpois,stats::dbeta,stats::dgamma,stats::dlnorm,stats::dnorm,stats::dweibull,stats::dnbinom,stats::dhyper,stats::dcauchy,stats::dbinom),
q=c(stats::qexp,stats::qpois,stats::qbeta,stats::qgamma,stats::qlnorm,stats::qnorm,stats::qweibull,stats::qnbinom,stats::qhyper,stats::qcauchy,stats::qbinom),
r=c(stats::rexp,stats::rpois,stats::rbeta,stats::rgamma,stats::rlnorm,stats::rnorm,stats::rweibull,stats::rnbinom,stats::rhyper,stats::rcauchy,stats::rbinom),
d_c=c(1,0,1,1,1,1,1,0,0,1,0),
indicadora=c("0","0","01","0","0","R","0","0","0","R","0")
)
DIS<-purrr::map(DIS,~subset(.x, DIS$d_c==as.numeric(Cont)))
DIS_0<-purrr::map(DIS,~subset(.x, DIS$indicadora=="0"))
DIS_R<-purrr::map(DIS,~subset(.x, DIS$indicadora=="R"))
DIS_01<-purrr::map(DIS,~subset(.x, DIS$indicadora=="01"))
if(sum(purrr::map_dbl(DIS_0,~length(.x)))==0){DIS_0<-NULL}
if(sum(purrr::map_dbl(DIS_R,~length(.x)))==0){DIS_R<-NULL}
if(sum(purrr::map_dbl(DIS_01,~length(.x)))==0){DIS_01<-NULL}
bt<-X
despl<-0
escala<-1
eps<-1E-15
if (sum(X<0)>0){
if (sum(X<0)/length(X)<0.03){
bt<-ifelse(X<0,eps,X)
b_0<-bt
}else{
b_0<-bt-min(bt)+eps
despl<- min(bt)
}
}else{
b_0<-bt
}
if(max(X)>1){
escala<-max(bt)
b_01<-(bt-despl)/(escala-despl)
}else{
b_01<-bt
}
fit_b<-function(bt,dist="",Cont.=Cont){
if(is.null(dist)){return(NULL)}
Disc<-!Cont
aju<-list()
if(!dist %in% DIS_01$Nombres){
suppressWarnings(aju[[1]]<-try(fitdistrplus::fitdist(bt,dist,method = "mle",discrete = Disc),silent = TRUE))
}
suppressWarnings(aju[[2]]<-try(fitdistrplus::fitdist(bt,dist,method = "mme",discrete = Disc),silent = TRUE))
suppressWarnings(aju[[3]]<-try(fitdistrplus::fitdist(bt,dist,method = c("mge"),discrete = Disc),silent = TRUE))
suppressWarnings(aju[[4]]<-try(MASS::fitdistr(bt,dist),silent = TRUE))
if(!assertthat::is.error(aju[[4]])){aju[[4]]$distname<-dist}
if(assertthat::is.error(aju[[1]]) & assertthat::is.error(aju[[2]]) &
assertthat::is.error(aju[[3]]) & assertthat::is.error(aju[[4]])){
return(list())
}
funcionales<-!purrr::map_lgl(aju,~assertthat::is.error(.x))
aju<-aju[funcionales]
return(aju)
}
DIS_0$Nombres
DIS_R$Nombres
X,gen=1;Cont=TRUE;plot=FALSE;p.val_min=.05;criteria=2;DPQR=T
X<-R,gen=1;Cont=TRUE;plot=FALSE;p.val_min=.05;criteria=2;DPQR=T
X<-R;gen=1;Cont=TRUE;plot=FALSE;p.val_min=.05;criteria=2;DPQR=T
indicadora=c("0","0","01","0","0","R","0","0","0","R","0")
length(indicadora)
length(c("exp","pois","beta","gamma","lnorm","norm","weibull","nbinom","hyper","cauchy","binom","t"))
length(c(1,0,1,1,1,1,1,0,0,1,0,1))
DIS<-list(Nombres=c("exp","pois","beta","gamma","lnorm","norm","weibull","nbinom","hyper","cauchy","binom","t"),
p=c(stats::pexp,stats::ppois,stats::pbeta,stats::pgamma,stats::plnorm,stats::pnorm,stats::pweibull,stats::pnbinom,stats::phyper,stats::pcauchy,stats::pbinom,stats::pt),
d=c(stats::dexp,stats::dpois,stats::dbeta,stats::dgamma,stats::dlnorm,stats::dnorm,stats::dweibull,stats::dnbinom,stats::dhyper,stats::dcauchy,stats::dbinom,stats::dt),
q=c(stats::qexp,stats::qpois,stats::qbeta,stats::qgamma,stats::qlnorm,stats::qnorm,stats::qweibull,stats::qnbinom,stats::qhyper,stats::qcauchy,stats::qbinom,stats::qt),
r=c(stats::rexp,stats::rpois,stats::rbeta,stats::rgamma,stats::rlnorm,stats::rnorm,stats::rweibull,stats::rnbinom,stats::rhyper,stats::rcauchy,stats::rbinom,stats::rt),
d_c=c(1,0,1,1,1,1,1,0,0,1,0,1),
indicadora=c("0","0","01","0","0","R","0","0","0","R","0","R")
)
DIS<-purrr::map(DIS,~subset(.x, DIS$d_c==as.numeric(Cont)))
DIS_0<-purrr::map(DIS,~subset(.x, DIS$indicadora=="0"))
DIS_R<-purrr::map(DIS,~subset(.x, DIS$indicadora=="R"))
DIS_01<-purrr::map(DIS,~subset(.x, DIS$indicadora=="01"))
DIS$indicadora=="0"
DIS_0
DIS
DIS[DIS$d_c==as.numeric(Cont)]
bt<-X
despl<-0
escala<-1
eps<-1E-15
if (sum(X<0)>0){
if (sum(X<0)/length(X)<0.03){
bt<-ifelse(X<0,eps,X)
b_0<-bt
}else{
b_0<-bt-min(bt)+eps
despl<- min(bt)
}
}else{
b_0<-bt
}
if(max(X)>1){
escala<-max(bt)
b_01<-(bt-despl)/(escala-despl)
}else{
b_01<-bt
}
fit_b<-function(bt,dist="",Cont.=Cont){
if(is.null(dist)){return(NULL)}
Disc<-!Cont
aju<-list()
if(!dist %in% DIS_01$Nombres){
suppressWarnings(aju[[1]]<-try(fitdistrplus::fitdist(bt,dist,method = "mle",discrete = Disc),silent = TRUE))
}
suppressWarnings(aju[[2]]<-try(fitdistrplus::fitdist(bt,dist,method = "mme",discrete = Disc),silent = TRUE))
suppressWarnings(aju[[3]]<-try(fitdistrplus::fitdist(bt,dist,method = c("mge"),discrete = Disc),silent = TRUE))
suppressWarnings(aju[[4]]<-try(MASS::fitdistr(bt,dist),silent = TRUE))
if(!assertthat::is.error(aju[[4]])){aju[[4]]$distname<-dist}
if(assertthat::is.error(aju[[1]]) & assertthat::is.error(aju[[2]]) &
assertthat::is.error(aju[[3]]) & assertthat::is.error(aju[[4]])){
return(list())
}
funcionales<-!purrr::map_lgl(aju,~assertthat::is.error(.x))
aju<-aju[funcionales]
return(aju)
}
DIS_0$Nombres
DIS_R$Nombres
DIS_01$Nombres
suppressWarnings(try(aju_0<-purrr::map(DIS_0$Nombres,~fit_b(b_0,.x)),silent = TRUE))
suppressWarnings(try(aju_R<-purrr::map(DIS_R$Nombres,~fit_b(bt,.x)),silent = TRUE))
suppressWarnings(try(aju_01<-purrr::map(DIS_01$Nombres,~fit_b(b_01,.x)),silent = TRUE))
AAA<-list(aju_0,aju_R,aju_01)
descate<-purrr::map(AAA,~length(.x))!=0
AAA<-AAA[descate]
bts<-list(b_0,bt,b_01)[descate]
num<-0
Compe<-data.frame()
for (aju_ls in 1:length(AAA)) {
aju<-AAA[[aju_ls]]
aju<-aju[purrr::map_lgl(aju,~length(.x)>0)]
bs<-bts[[aju_ls]]
for (comp in 1:length(aju)) {
for (ress in 1:length(aju[[comp]])) {
num<-num+1
if(length(aju[[comp]])!=0){evaluar<-aju[[comp]][[ress]]}
else{evaluar<-NULL}
if (is.null(evaluar) | length(evaluar)==0 |
c(NA) %in% evaluar$estimate | c(NaN) %in% evaluar$estimate) {next()}
distname<-evaluar$distname
dist_pfun<-try(get(paste0("p",distname)),silent = TRUE)
dist_rfun<-try(get(paste0("r",distname)),silent = TRUE)
if(assertthat::is.error(dist_rfun)){next()}
argumentos<-formalArgs(dist_pfun)
argumentos<-argumentos[argumentos %in% names(evaluar$estimate)]
num_param<-length(argumentos)
evaluar$estimate<-evaluar$estimate[names(evaluar$estimate) %in% argumentos]
if(num_param==1){
EAD<-try(AD<-ADGofTest::ad.test(bs,dist_pfun,evaluar$estimate[1]),silent = TRUE)
if (Cont) {KS<-try(KS<-stats::ks.test(bs,dist_pfun,evaluar$estimate[1]),silent = TRUE)}
else{KS<-data.frame(p.value=0)}
if(assertthat::is.error(EAD) | assertthat::is.error(KS)){next()}
if(is.na(KS$p.value)){next()}
Chs<-data.frame(p.value=0)
}
if(num_param==2){
suppressWarnings(
Err_pl<-try(AD<-ADGofTest::ad.test(bs,dist_pfun,evaluar$estimate[1],evaluar$estimate[2]),silent = TRUE))
if (assertthat::is.error(Err_pl)) {
Err_pl<-try(AD<-ADGofTest::ad.test(bs,dist_pfun,evaluar$estimate[1],,evaluar$estimate[2]),silent = TRUE)
}
if (Cont) {Err_pl2<-try(KS<-stats::ks.test(bs,dist_pfun,evaluar$estimate[1],evaluar$estimate[2]),silent = TRUE)}
else{Err_pl2<-KS<-data.frame(p.value=0)}
if(assertthat::is.error(Err_pl) | assertthat::is.error(Err_pl2)){next()}
if(is.na(Err_pl2$p.value)){next()}
suppressWarnings(
EE_Chs<-try(dst_chsq<-dist_rfun(length(bs),evaluar$estimate[1],evaluar$estimate[2]))
)
if(assertthat::is.error(EE_Chs) | prod(is.na(EE_Chs))==1){
dst_chsq<-dist_rfun(length(bs),evaluar$estimate[1],,evaluar$estimate[2])
}
Chs<-data.frame(p.value=0)
}
pvvv<-p.val_min
if(criteria==1){
crit<-AD$p.value>pvvv | KS$p.value>pvvv | Chs$p.value >pvvv
}else{
crit<-AD$p.value>(pvvv) & KS$p.value>(pvvv)
}
if(crit){
if(aju_ls %in% 3){
estimate3=despl
estimate4=escala
}else if(aju_ls==1){
estimate3=despl
estimate4=1
}else{
estimate3=0
estimate4=1
}
Compe<-rbind(Compe,data.frame(Dist=distname,AD_p.v=AD$p.value,KS_p.v=KS$p.value,
Chs_p.v=Chs$p.value,
estimate1=evaluar$estimate[1],estimate2=evaluar$estimate[2],
estimateLL1=estimate3,estimateLL2=estimate4
))
}else{
next()
}
}
}
}
if (nrow(Compe)==0) {
warning("No fit")
return(NULL)
}
Compe
length(AAA)
aju_ls
distname
dist_pfun
argumentos
argumentos
num_param
evaluar
num_param
EAD
library(‘ADGofTest)
library(ADGofTest)
