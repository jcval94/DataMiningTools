1
3
df<-iris
df <- as.data.frame(df)
dim(df[,vect])
vect = names(df)
dim(df[,vect])
0 %in% dim(df[,vect])
iris[,"ff"]
#' @param df data.frame object
#' @param vect names od df by defaultlt
#' @param porcent 1.5% by default, represents the minimum percentage for a category
#' @param ALL TRUE by default, If TRUE, the function will return the original data frame merged with the dummy variables, otherwise just return the dummy variables
#' @param disc_value maximum number of categories which a categorical value must have
#'
#' @return
#' @export
#'
#' @examples
categorizar <- function(df, vect = names(df), porcent = 0.015, ALL = TRUE, disc_value = 85) {
df <- as.data.frame(df)
nombrs_1 <- names(df)
if(!vect %in% nombrs_1){warning(paste0("vect parameter not well defined"));return(invisible())}
if(0 %in% dim(df[,vect])){warning(paste0("data frame empty"));return(invisible())}
for (vector in vect) {
print(vector)
variable <- df[, vector]
if (length(unique(variable)) > disc_value) {
(next)()
}
uvp <- unique(variable)
if (length(uvp) == 2) {
posicion <- as.character(variable[1])
df[, paste0(vector, "_", posicion, " & ", uvp[uvp != posicion], "")] <- ifelse(as.character(df[, vector]) == posicion[1], 1, 0)
}
else {
nombres_po <- as.character(unique(variable))
prp <- names(table(variable))[table(variable)/length(variable) > porcent]
nombres <- nombres_po[nombres_po %in% prp]
nomb1 <- paste0(vector, "_", nombres)
nombres_Otros <- nombres_po[!nombres_po %in% prp]
for (y in 1:length(nombres)) {
df[, nomb1[y]] <- ifelse(as.character(df[, vector]) == nombres[y], 1, 0)
}
if (length(nombres_Otros) != 0) {
df[, paste0(vector, "_Otros")] <- 0
for (y in 1:length(nombres_Otros)) {
df[, paste0(vector, "_Otros")] <- c(df[, paste0(vector, "_Otros")] + ifelse(as.character(df[, vector]) == nombres_Otros[y], 1, 0))
}
}
}
}
if (ALL) {
return(df)
}
else {
return(df[, !names(df) %in% nombrs_1])
}
}
data(cars)
cars
categorizar(cars)
categorizar(cars,vect = "speed")
vect
nombrs_1
nombrs_1 <- names(df)
purrr::map_lgl(vect,~.x %in% nombrs_1)
install.packages("dplyr")
?cbind
8
rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 0) # middle 2 rownames
rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 1) # 3 rownames (default)
rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 2) # 4 rownames
dd<-10
rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 0) # middle 2 rownames
rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 1) # 3 rownames (default)
rbind(1:4, c = 2, "a++" = 10, dd, deparse.level = 2) # 4 rownames
identical(df1, rbind(df,  new, make.row.names=FALSE))
install.packages("purrr")
#' @export
#'
#' @examples
#'
#' data(iris)
#' d_1 <- iris[, 5]
#' df2 <- d_1
#' df1 <- rbind(iris, iris)
#' CBIND(df1, df2)
#'
CBIND <- function(df1, df2,...) {
is_df <- purrr::map_lgl(list(df1, df2), is.data.frame)
if (any(is_df)) {
df1 <- tibble::as_tibble(df1)
df2 <- tibble::as_tibble(df2)
}
nd1 <- nrow(df1)
nd2 <- nrow(df2)
if (nd1 == nd2) {
return(cbind(df1, df2,...))
}
else {
mxm <- c(nd1, nd2) != max(c(nd1, nd2))
dmx <- list(df1, df2)[mxm][[1]]
dmn <- list(df1, df2)[!mxm][[1]]
df_rw <- c(nd1, nd2)[mxm] - c(nd1, nd2)[!mxm]
dmx <- rbind(dmx, tibble::as_tibble(matrix(NA, -df_rw, ncol(dmx), dimnames = list(rep(NA, -df_rw), names(dmx)))))
if (is_df[1]) {
return(cbind(dmn, dmx,...))
}
else {
return(cbind(dmx, dmn,...))
}
}
}
data(iris)
d_1 <- iris[, 5]
df2 <- d_1
df1 <- rbind(iris, iris)
CBIND(df1, df2)
CBIND(df1, df2, make.row.names=FALSE)
df2
df1
CBIND(df1, df2, new.col=FALSE)
CBIND(df1, df2, new.col=FALSE)
data(iris)
d_1 <- iris[, 5]
df2 <- d_1
df1 <- rbind(iris, iris)
df3<-CBIND(df1, df2, new.col=FALSE)
df3
dim(df3)
#' d_1$Species <- as.character(d_1$Species)
#' d_1[1, 5] <- "Rse"
#' d_1[["Nueva"]] <- c("U")
#' ir <- iris
#' ir$W <- "rr"
#' tail(RBIND(df1 = ir, df2 = d_1))
#' head(RBIND(df1 = d_1, df2 = ir))
#' df3<-RBIND(iris, esoph)
#' dim(df3)
#'
RBIND <- function(df1, df2) {
nd1 <- ncol(df1)
nd2 <- ncol(df2)
if (nd1 == nd2 && all(names(df1) == names(df2))) {
return(rbind(df1, df2))
}
else {
mxm <- c(nd1, nd2) != max(c(nd1, nd2))
if (all(mxm == F)) {
mxm <- c(TRUE, FALSE)
}
dmx <- list(df1, df2)[mxm][[1]]
dmn <- list(df1, df2)[!mxm][[1]]
min_ex <- names(dmn)[!names(dmn) %in% names(dmx)]
max_ex <- names(dmx)[!names(dmx) %in% names(dmn)]
if (length(min_ex) + length(max_ex) == 0) {
dmn <- cbind(dmn, tibble::as_tibble(matrix(NA, nrow(dmn), c(nd1, nd2)[mxm] - c(nd1, nd2)[!mxm], dimnames = list(1:nrow(dmn), max_ex))))
}
else {
dmn <- cbind(dmn, tibble::as_tibble(matrix(NA, nrow(dmn), length(max_ex), dimnames = list(1:nrow(dmn), max_ex))))
dmx <- cbind(dmx, tibble::as_tibble(matrix(NA, nrow(dmx), length(min_ex), dimnames = list(1:nrow(dmx), min_ex))))
}
if (nd1 < nd2 | mxm[1])
return(rbind(dmx, dmn))
else return(rbind(dmn, dmx))
}
}
data(iris)
d_1 <- iris[1, ]
d_1$Species <- as.character(d_1$Species)
d_1[1, 5] <- "Rse"
d_1[["Nueva"]] <- c("U")
ir <- iris
ir$W <- "rr"
tail(RBIND(df1 = ir, df2 = d_1))
head(RBIND(df1 = d_1, df2 = ir))
df3<-RBIND(iris, esoph)
dim(df3)
esoph
dim(df3)
9
#' @param X
#'
#' @return
#' @export
#'
#' @examples
#'
#'class_as_class(iris,"character","factor")
#'
#'
class_as_class <- function(df, class1, class2) {
f_a_s <- function(X) {
if (class(X) %in% class1) {
fun_as <- get(paste0("as.", class2))
X <- fun_as(X)
}
X
}
purrr::map_df(df, ~f_a_s(.x))
}
data(iris)
class_as_class(iris,"character","factor")
class_as_class(iris,"factor","character")
class_as_class(iris,"numeric","character")
class_as_class(iris,"factor","numeri")
class_as_class(iris,"factor","numeric")
class_as_class(iris,"factor","character")
df1<-rbind(iris,iris)
df1[!duplicated(df),]
duplicated(df)
duplicated(df1)
#'
#' @importFrom purrr map_lgl
#'
#' @examples
#'
#' data(iris)
#' iris[["A"]] <- 0
#' head(iris)
#' head(drop.df(iris))
#'
drop.df <- function(df) {
df1<-df[, purrr::map_lgl(df, ~length(unique(.x)) > 1)]
df1<-df1[!duplicated(df1),]
df1<-dft(df1)
df1<-df[, purrr::map_lgl(df, ~length(unique(.x)) > 1)]
df1<-df1[!duplicated(df1),]
dft(df1)
}
data(iris)
iris[["A"]] <- 0
head(iris)
head(drop.df(iris))
#'
#' @importFrom purrr map_lgl
#'
#' @examples
#'
#' data(iris)
#' iris[["A"]] <- 0
#' head(iris)
#' head(drop.df(iris))
#'
drop.df <- function(df) {
df1<-df[, purrr::map_lgl(df, ~length(unique(.x)) > 1)]
df1<-df1[!duplicated(df1),]
df1<-dft(df1)
df1<-df[, purrr::map_lgl(df, ~length(unique(.x)) > 1)]
df1<-df1[!duplicated(df1),]
dft(df1)
}
head(drop.df(iris))
#' @importFrom dplyr as_tibble
#'
#' @examples
#'
#' data(iris)
#' Transpose <- dft(iris)
#'
#' View(Transpose)
#'
#'
dft <- function(df) {
cl<-class(df)
if(! "data.frame" %in% cl){warning("object must be a data.frame")
return(invisible())
}
if (cl %in% "tibble") {
Tib <- TRUE
}
else {
Tib <- FALSE
}
df_1 <- as.data.frame(t(df))
names(df_1) <- row.names(df)
if (Tib) {
return(dplyr::as_tibble(df_1))
}
else {
return(df_1)
}
}
head(drop.df(iris))
#'
#' @importFrom purrr map_lgl
#'
#' @examples
#'
#' data(iris)
#' iris[["A"]] <- 0
#' head(iris)
#' head(drop.df(iris))
#'
drop.df <- function(df) {
df1<-df[, purrr::map_lgl(df, ~length(unique(.x)) > 1)]
df1<-df1[!duplicated(df1),]
df1<-dft(df1)
df1<-df[, purrr::map_lgl(df, ~length(unique(.x)) > 1)]
df1<-df1[!duplicated(df1),]
return(dft(df1))
}
head(drop.df(iris))
#'
#' @importFrom purrr map_lgl
#'
#' @examples
#'
#' data(iris)
#' iris[["A"]] <- 0
#' head(iris)
#' head(drop.df(iris))
#'
drop.df <- function(df) {
df1<-df[, purrr::map_lgl(df, ~length(unique(.x)) > 1)]
df1<-df1[!duplicated(df1),]
df1<-dft(df1)
df1<-df[, purrr::map_lgl(df, ~length(unique(.x)) > 1)]
df1<-df1[!duplicated(df1),]
return(df1)
}
head(drop.df(iris))
data(iris)
iris[["A"]] <- 0
head(iris)
head(drop.df(iris))
#'
#' @importFrom purrr map_lgl
#'
#' @examples
#'
#' data(iris)
#' iris[["A"]] <- 0
#' head(iris)
#' head(drop.df(iris))
#'
drop.df <- function(df) {
df1<-df[, purrr::map_lgl(df, ~length(unique(.x)) > 1)]
df1<-df1[!duplicated(df1),]
df1<-dft(df1)
df1<-df1[, purrr::map_lgl(df1, ~length(unique(.x)) > 1)]
df1<-df1[!duplicated(df1),]
return(dft(df1))
}
head(drop.df(iris))
#' @export
#'
#' @examples
#'
#' proporciones <- c(4, 2)
#' valores <- c(4, 8)
#' cortes <- c(1, 5, 10)
#'
#' escoger(1, valores, cortes)
#'
escoger <- function(persona1, valores, cortes) {
a <- c()
for (i in 1:(length(cortes) + 1)) {
a <- ifelse(persona1 < cortes[i + 1] & persona1 >= cortes[i], valores[i], NaN)
ifelse(is.na(a), a <- ifelse(persona1 < cortes[i + 1] & persona1 >= cortes[i], valores[i], NaN), (break)())
}
return(a)
}
proporciones <- c(4, 2)
valores <- c(4, 8)
cortes <- c(1, 5, 10)
replacemet(1, valores, cortes)
#' @export
#'
#' @examples
#'
#' proporciones <- c(4, 2)
#' valores <- c(4, 8)
#' cortes <- c(1, 5, 10)
#'
#' replacemet(1, valores, cortes)
#'
replacemet <- function(persona1, valores, cortes) {
a <- c()
for (i in 1:(length(cortes) + 1)) {
a <- ifelse(persona1 < cortes[i + 1] & persona1 >= cortes[i], valores[i], NaN)
ifelse(is.na(a), a <- ifelse(persona1 < cortes[i + 1] & persona1 >= cortes[i], valores[i], NaN), (break)())
}
return(a)
}
replacemet(1, valores, cortes)
persona1
replacemet(1, valores, cortes)
replacemet(3, valores, cortes)
replacemet(6, valores, cortes)
replacemet(5, valores, cortes)
replacemet(10, valores, cortes)
replacemet(.1, valores, cortes)
#' replacemet(1, valores, cortes)
#'
#' replacemet(5, valores, cortes)
#'
#' replacemet(10, valores, cortes)
#'
#' replacemet(.1, valores, cortes)
#'
#'
#'
replacemet <- function(X, valores, cortes) {
valores<-c(-Inf,valores,Inf)
a <- c()
for (i in 1:(length(cortes) + 1)) {
a <- ifelse(X < cortes[i + 1] & X >= cortes[i], valores[i], NaN)
ifelse(is.na(a), a <- ifelse(X < cortes[i + 1] & X >= cortes[i], valores[i], NaN), (break)())
}
return(a)
}
replacemet(1, valores, cortes)
replacemet(5, valores, cortes)
replacemet(10, valores, cortes)
replacemet(.1, valores, cortes)
a<-t.test(rnorm(!00))
a<-t.test(rnorm(100))
a
quantile(b, 0.25, na.rm = TRUE)
b<-rnorm(!000)
b<-rnorm(1000)
quantile(b, na.rm = TRUE)
min(b)
quantile(a)
quantile(b, na.rm = TRUE)
as.data.frame(quantile(b, na.rm = TRUE))
est1<-as.list(quantile(b, na.rm = TRUE))
est1
est3<-t.test(b)
est3
class(est3)
est3$statistic
est3$parameter
est3$estimate
est3$conf.int
est3$conf.int[1]
est3$p.value
est3$statistic
