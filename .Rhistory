formals(gene)[3]<-p
distribu<-paste0("binom(",p,")")
MA=gene(n = gen)
if(plot){
DF<-rbind(data.frame(A="Fit",DT=MA),
data.frame(A="Real",DT=X))
pl <- ggplot2::ggplot(DF,ggplot2::aes(x=DF$DT,fill=DF$A)) + ggplot2::geom_density(alpha=0.4) +ggplot2::ggtitle(distribu)
}else{
pl<-NULL
}
return(list(distribu,gene,MA[1:gen],data.frame(Dist="binom",AD_p.v=1,KS_p.v=1,estimate1=1,estimate2=p,estimateLL1=0,estimateLL2=1,PV_S=2),pl))
}
DIS<-list(Nombres=c("exp","pois","beta","gamma","lnorm","norm","weibull","nbinom","hyper","cauchy","binom"),
p=c(stats::pexp,stats::ppois,stats::pbeta,stats::pgamma,stats::plnorm,stats::pnorm,stats::pweibull,stats::pnbinom,stats::phyper,stats::pcauchy,stats::pbinom),
d=c(stats::dexp,stats::dpois,stats::dbeta,stats::dgamma,stats::dlnorm,stats::dnorm,stats::dweibull,stats::dnbinom,stats::dhyper,stats::dcauchy,stats::dbinom),
q=c(stats::qexp,stats::qpois,stats::qbeta,stats::qgamma,stats::qlnorm,stats::qnorm,stats::qweibull,stats::qnbinom,stats::qhyper,stats::qcauchy,stats::qbinom),
r=c(stats::rexp,stats::rpois,stats::rbeta,stats::rgamma,stats::rlnorm,stats::rnorm,stats::rweibull,stats::rnbinom,stats::rhyper,stats::rcauchy,stats::rbinom),
d_c=c(1,0,1,1,1,1,1,0,0,1,0),
indicadora=c("0","0","01","0","0","R","0","0","0","R","0")
)
DIS<-purrr::map(DIS,~subset(.x, DIS$d_c==as.numeric(Cont)))
DIS_0<-purrr::map(DIS,~subset(.x, DIS$indicadora=="0"))
DIS_R<-purrr::map(DIS,~subset(.x, DIS$indicadora=="R"))
DIS_01<-purrr::map(DIS,~subset(.x, DIS$indicadora=="01"))
if(sum(purrr::map_dbl(DIS_0,~length(.x)))==0){DIS_0<-NULL}
if(sum(purrr::map_dbl(DIS_R,~length(.x)))==0){DIS_R<-NULL}
if(sum(purrr::map_dbl(DIS_01,~length(.x)))==0){DIS_01<-NULL}
bt<-X
despl<-0
escala<-1
eps<-1E-15
if (sum(X<0)>0){
if (sum(X<0)/length(X)<0.03){
bt<-ifelse(X<0,eps,X)
b_0<-bt
}else{
b_0<-bt-min(bt)+eps
despl<- min(bt)
}
}else{
b_0<-bt
}
if(max(X)>1){
escala<-max(bt)
b_01<-(bt-despl)/(escala-despl)
}else{
b_01<-bt
}
fit_b<-function(bt,dist="",Cont.=Cont){
if(is.null(dist)){return(NULL)}
Disc<-!Cont
aju<-list()
if(!dist %in% DIS_01$Nombres){
suppressWarnings(aju[[1]]<-try(fitdistrplus::fitdist(bt,dist,method = "mle",discrete = Disc),silent = TRUE))
}
suppressWarnings(aju[[2]]<-try(fitdistrplus::fitdist(bt,dist,method = "mme",discrete = Disc),silent = TRUE))
suppressWarnings(aju[[3]]<-try(fitdistrplus::fitdist(bt,dist,method = c("mge"),discrete = Disc),silent = TRUE))
suppressWarnings(aju[[4]]<-try(MASS::fitdistr(bt,dist),silent = TRUE))
if(!assertthat::is.error(aju[[4]])){aju[[4]]$distname<-dist}
if(assertthat::is.error(aju[[1]]) & assertthat::is.error(aju[[2]]) &
assertthat::is.error(aju[[3]]) & assertthat::is.error(aju[[4]])){
return(list())
}
funcionales<-!purrr::map_lgl(aju,~assertthat::is.error(.x))
aju<-aju[funcionales]
return(aju)
}
DIS_0$Nombres
DIS_R$Nombres
X,gen=1;Cont=TRUE;plot=FALSE;p.val_min=.05;criteria=2;DPQR=T
X<-R,gen=1;Cont=TRUE;plot=FALSE;p.val_min=.05;criteria=2;DPQR=T
X<-R;gen=1;Cont=TRUE;plot=FALSE;p.val_min=.05;criteria=2;DPQR=T
indicadora=c("0","0","01","0","0","R","0","0","0","R","0")
length(indicadora)
length(c("exp","pois","beta","gamma","lnorm","norm","weibull","nbinom","hyper","cauchy","binom","t"))
length(c(1,0,1,1,1,1,1,0,0,1,0,1))
DIS<-list(Nombres=c("exp","pois","beta","gamma","lnorm","norm","weibull","nbinom","hyper","cauchy","binom","t"),
p=c(stats::pexp,stats::ppois,stats::pbeta,stats::pgamma,stats::plnorm,stats::pnorm,stats::pweibull,stats::pnbinom,stats::phyper,stats::pcauchy,stats::pbinom,stats::pt),
d=c(stats::dexp,stats::dpois,stats::dbeta,stats::dgamma,stats::dlnorm,stats::dnorm,stats::dweibull,stats::dnbinom,stats::dhyper,stats::dcauchy,stats::dbinom,stats::dt),
q=c(stats::qexp,stats::qpois,stats::qbeta,stats::qgamma,stats::qlnorm,stats::qnorm,stats::qweibull,stats::qnbinom,stats::qhyper,stats::qcauchy,stats::qbinom,stats::qt),
r=c(stats::rexp,stats::rpois,stats::rbeta,stats::rgamma,stats::rlnorm,stats::rnorm,stats::rweibull,stats::rnbinom,stats::rhyper,stats::rcauchy,stats::rbinom,stats::rt),
d_c=c(1,0,1,1,1,1,1,0,0,1,0,1),
indicadora=c("0","0","01","0","0","R","0","0","0","R","0","R")
)
DIS<-purrr::map(DIS,~subset(.x, DIS$d_c==as.numeric(Cont)))
DIS_0<-purrr::map(DIS,~subset(.x, DIS$indicadora=="0"))
DIS_R<-purrr::map(DIS,~subset(.x, DIS$indicadora=="R"))
DIS_01<-purrr::map(DIS,~subset(.x, DIS$indicadora=="01"))
DIS$indicadora=="0"
DIS_0
DIS
DIS[DIS$d_c==as.numeric(Cont)]
bt<-X
despl<-0
escala<-1
eps<-1E-15
if (sum(X<0)>0){
if (sum(X<0)/length(X)<0.03){
bt<-ifelse(X<0,eps,X)
b_0<-bt
}else{
b_0<-bt-min(bt)+eps
despl<- min(bt)
}
}else{
b_0<-bt
}
if(max(X)>1){
escala<-max(bt)
b_01<-(bt-despl)/(escala-despl)
}else{
b_01<-bt
}
fit_b<-function(bt,dist="",Cont.=Cont){
if(is.null(dist)){return(NULL)}
Disc<-!Cont
aju<-list()
if(!dist %in% DIS_01$Nombres){
suppressWarnings(aju[[1]]<-try(fitdistrplus::fitdist(bt,dist,method = "mle",discrete = Disc),silent = TRUE))
}
suppressWarnings(aju[[2]]<-try(fitdistrplus::fitdist(bt,dist,method = "mme",discrete = Disc),silent = TRUE))
suppressWarnings(aju[[3]]<-try(fitdistrplus::fitdist(bt,dist,method = c("mge"),discrete = Disc),silent = TRUE))
suppressWarnings(aju[[4]]<-try(MASS::fitdistr(bt,dist),silent = TRUE))
if(!assertthat::is.error(aju[[4]])){aju[[4]]$distname<-dist}
if(assertthat::is.error(aju[[1]]) & assertthat::is.error(aju[[2]]) &
assertthat::is.error(aju[[3]]) & assertthat::is.error(aju[[4]])){
return(list())
}
funcionales<-!purrr::map_lgl(aju,~assertthat::is.error(.x))
aju<-aju[funcionales]
return(aju)
}
DIS_0$Nombres
DIS_R$Nombres
DIS_01$Nombres
suppressWarnings(try(aju_0<-purrr::map(DIS_0$Nombres,~fit_b(b_0,.x)),silent = TRUE))
suppressWarnings(try(aju_R<-purrr::map(DIS_R$Nombres,~fit_b(bt,.x)),silent = TRUE))
suppressWarnings(try(aju_01<-purrr::map(DIS_01$Nombres,~fit_b(b_01,.x)),silent = TRUE))
AAA<-list(aju_0,aju_R,aju_01)
descate<-purrr::map(AAA,~length(.x))!=0
AAA<-AAA[descate]
bts<-list(b_0,bt,b_01)[descate]
num<-0
Compe<-data.frame()
for (aju_ls in 1:length(AAA)) {
aju<-AAA[[aju_ls]]
aju<-aju[purrr::map_lgl(aju,~length(.x)>0)]
bs<-bts[[aju_ls]]
for (comp in 1:length(aju)) {
for (ress in 1:length(aju[[comp]])) {
num<-num+1
if(length(aju[[comp]])!=0){evaluar<-aju[[comp]][[ress]]}
else{evaluar<-NULL}
if (is.null(evaluar) | length(evaluar)==0 |
c(NA) %in% evaluar$estimate | c(NaN) %in% evaluar$estimate) {next()}
distname<-evaluar$distname
dist_pfun<-try(get(paste0("p",distname)),silent = TRUE)
dist_rfun<-try(get(paste0("r",distname)),silent = TRUE)
if(assertthat::is.error(dist_rfun)){next()}
argumentos<-formalArgs(dist_pfun)
argumentos<-argumentos[argumentos %in% names(evaluar$estimate)]
num_param<-length(argumentos)
evaluar$estimate<-evaluar$estimate[names(evaluar$estimate) %in% argumentos]
if(num_param==1){
EAD<-try(AD<-ADGofTest::ad.test(bs,dist_pfun,evaluar$estimate[1]),silent = TRUE)
if (Cont) {KS<-try(KS<-stats::ks.test(bs,dist_pfun,evaluar$estimate[1]),silent = TRUE)}
else{KS<-data.frame(p.value=0)}
if(assertthat::is.error(EAD) | assertthat::is.error(KS)){next()}
if(is.na(KS$p.value)){next()}
Chs<-data.frame(p.value=0)
}
if(num_param==2){
suppressWarnings(
Err_pl<-try(AD<-ADGofTest::ad.test(bs,dist_pfun,evaluar$estimate[1],evaluar$estimate[2]),silent = TRUE))
if (assertthat::is.error(Err_pl)) {
Err_pl<-try(AD<-ADGofTest::ad.test(bs,dist_pfun,evaluar$estimate[1],,evaluar$estimate[2]),silent = TRUE)
}
if (Cont) {Err_pl2<-try(KS<-stats::ks.test(bs,dist_pfun,evaluar$estimate[1],evaluar$estimate[2]),silent = TRUE)}
else{Err_pl2<-KS<-data.frame(p.value=0)}
if(assertthat::is.error(Err_pl) | assertthat::is.error(Err_pl2)){next()}
if(is.na(Err_pl2$p.value)){next()}
suppressWarnings(
EE_Chs<-try(dst_chsq<-dist_rfun(length(bs),evaluar$estimate[1],evaluar$estimate[2]))
)
if(assertthat::is.error(EE_Chs) | prod(is.na(EE_Chs))==1){
dst_chsq<-dist_rfun(length(bs),evaluar$estimate[1],,evaluar$estimate[2])
}
Chs<-data.frame(p.value=0)
}
pvvv<-p.val_min
if(criteria==1){
crit<-AD$p.value>pvvv | KS$p.value>pvvv | Chs$p.value >pvvv
}else{
crit<-AD$p.value>(pvvv) & KS$p.value>(pvvv)
}
if(crit){
if(aju_ls %in% 3){
estimate3=despl
estimate4=escala
}else if(aju_ls==1){
estimate3=despl
estimate4=1
}else{
estimate3=0
estimate4=1
}
Compe<-rbind(Compe,data.frame(Dist=distname,AD_p.v=AD$p.value,KS_p.v=KS$p.value,
Chs_p.v=Chs$p.value,
estimate1=evaluar$estimate[1],estimate2=evaluar$estimate[2],
estimateLL1=estimate3,estimateLL2=estimate4
))
}else{
next()
}
}
}
}
if (nrow(Compe)==0) {
warning("No fit")
return(NULL)
}
Compe
length(AAA)
aju_ls
distname
dist_pfun
argumentos
argumentos
num_param
evaluar
num_param
EAD
library(â€˜ADGofTest)
library(ADGofTest)
modes
library(models)
library(modes)
b<-rnorm(100)
kmeans(b,2)
Kb<-kmeans(b,2)
Kb$cluster
Kb<-kmeans(sort(b),2)
Kb
b[Kb$cluster==2]
diff(Kb$cluster)
b[c(0,diff(Kb$cluster))==1]
est2<-list(mean = mean(b, na.rm = T),
sd = sd(b, na.rm = T),
len = length(b),
nas = n1 - length(b),
mode=histo$breaks[histo$density==max(histo$density)],
kurtosis=moments::kurtosis(b),
skewness=moments::skewness(b),
bimodal_coef= modes::bimodality_coefficient(b),
interquantile_rangue=est1[[2]]-est1[[4]],
dist = as.character(fit),
Discrete = all(floor(b)==b),
count.values = table(b),
kmeans.cuts = c(b[c(0,diff(Kb$cluster))==1],b[c(0,diff(Kb$cluster))==2]),
max.likelihood = Db[["x"]][Db[["y"]]==max(Db[["y"]])],
dist.p.value = as.character(p.value))
kmeans.cuts = c(b[c(0,diff(Kb$cluster))==1],b[c(0,diff(Kb$cluster))==2])
kmeans.cuts
summary(b)
c(b[c(0,diff(Kb$cluster))==1],b[c(0,diff(Kb$cluster))==2])
Kb$centers
b<-rnorm(10000)
Kb<-kmeans(sort(b),2)
Kb$centers
mean(Kb$centers)
Kb$centers
as.character(p.value))
employees<-c("E1","E2","E3","E4")
9
#'
#' @return a data frame with numeric variables
#' @export
#'
#' @examples
#'
#' data(iris)
#'
#' Dis_cont(iris)
#'
Dis_cont <- function(df) {
vrbls <- map_chr(df, ~class(.x))
num_var <- vrbls != "numeric"
return(list(df[, num_var], df[, !num_var]))
}
Dis_cont(iris)
#'
#' @return a data frame with numeric variables
#' @export
#'
#' @examples
#'
#' data(iris)
#'
#' Dis_cont(iris)
#'
Dis_cont <- function(df) {
vrbls <- purrr::map_chr(df, ~class(.x))
num_var <- vrbls != "numeric"
return(list(df[, num_var], df[, !num_var]))
}
Dis_cont(iris)
#'
#' @return a list of data frame objects with numeric variables and non nmeric variables
#' @export
#'
#' @examples
#'
#' data(iris)
#'
#' Dis_cont(iris)
#'
Dis_cont <- function(df) {
df<-tibble::as_tibble(df)
vrbls <- purrr::map_chr(df, ~class(.x))
num_var <- vrbls != "numeric"
return(list(df[, num_var], df[, !num_var]))
}
Dis_cont(iris)
iris
data(iris)
Dis_cont(iris)
library(dplyr)
left_join
inner_join
?inner_join
band_members %>% nest_join(band_instruments)
band_members
#' @importFrom dplyr full_join
#' @importFrom dplyr semi_join
#' @importFrom dplyr nest_join
#' @importFrom dplyr anti_join
#'
#' @examples
#'
#' band_members %>% multi_join(band_instruments)
#'
#'
multi_join <- function(list_dfs, join_type = "left", by, ...) {
join_fun <- get(paste0(join_type, "_join"))
Apl_jn <- function(df1, df2) {
join_fun(df1, df2, by)
}
for (kt in 1:(length(list_dfs) - 1)) {
if (kt == 1) {
df_jn <- list_dfs[[kt]]
}
df_jn <- Apl_jn(df_jn, list_dfs[[kt + 1]])
}
df_jn
}
band_members %>% multi_join(band_instruments)
band_members %>% multi_join(band_instruments,join_type="nest")
#' @importFrom dplyr full_join
#' @importFrom dplyr semi_join
#' @importFrom dplyr nest_join
#' @importFrom dplyr anti_join
#'
#' @examples
#'
#' band_members %>% multi_join(band_instruments,join_type="nest")
#'
#'
multi_join <- function(list_dfs, join_type = "left", by, ...) {
join_fun <- get(paste0(join_type, "_join"))
Apl_jn <- function(df1, df2) {
join_fun(df1, df2, by)
}
for (kt in 1:(length(list_dfs) - 1)) {
if (kt == 1) {
df_jn <- list_dfs[[kt]]
}
df_jn <- Apl_jn(df_jn, list_dfs[[kt + 1]])
}
df_jn
}
multi_join(list(band_members,band_instruments),join_type="nest")
list_dfs
band_members
band_instruments
purrr::map(list_dfs,names)
list_dfs=list(band_members,band_instruments)
join_fun <- get(paste0(join_type, "_join"))
Apl_jn <- function(df1, df2) {
join_fun(df1, df2, by)
}
join_type = "left"
join_fun <- get(paste0(join_type, "_join"))
Apl_jn <- function(df1, df2) {
join_fun(df1, df2, by)
}
if(missing(by)){
purrr::map(list_dfs,names)
}
purrr::map(list_dfs,names)
purrr::map_chr(list_dfs,names)
purrr::map(list_dfs,names)
names_<-purrr::map(list_dfs,names)
names_
names_[[1]]
length(names_)
1:(length(names_)-1)
1:length(names_[[1]])
ii<-1
i<-1
names_
names_[[i+1]]
j
j<-1
names_[[i]][j]
names_[[i]][j] %in% names_[[i+1]]
j<-2
names_[[i]][j] %in% names_[[i+1]]
names_[[i]][j]
c(sv,names_[[i]][j])
sv<-c()
c(sv,names_[[i]][j])
names_
names_[[-1]]
do.call("c",names_[[-1]])
data(LPP2005REC)
install.packages(c("reshape2", "TSA"))
#'
#' @param a a string containing R code
#'
#' @return
#' @export
#'
#' @examples
#'
#' text_eval("1+1")
#'
text_eval <- function(a) {
if (class(a) != "character") {
return(invisible())
}
eval(parse(text = a))
}
text_eval("1+1")
text_eval("A<-runif(10);A")
text_eval("library(stats)")
text_eval("A<-runif(30);A")
#Plot an histogram
text_eval("hist(A)")
A
text_eval("hist(rnorm(30))")
sample(10,100)
sample(1:10,100)
sample(1:1000,100)
df<-iris
split = 0.75
tr <- sample(1:nrow(df),floor(nrow(df)*split))
tr
df[tr, ]
df[!tr, ]
floor(nrow(df)*split)
list(df[tr, ], df[-tr, ])
list(df[tr, ], df[-tr, ])
data(iris)
TrainTestSplit(iris)
#' @param split
#'
#' @return
#' @export
#'
#' @examples
#'
#' data(iris)
#' TrainTestSplit(iris)
#'
TrainTestSplit <- function(df, split = 0.75) {
if (!any("data.frame" %in% class(df))) {
exit("must be a data.frame object")
}
tr <- sample(1:nrow(df),floor(nrow(df)*split))
list(df[tr, ], df[-tr, ])
}
TrainTestSplit(iris)
globalenv(1)
globalenv()
#'
#' @return a list
#' @export
#'
#' @examples
#'
#' data(iris)
#' set.seed(31109)
#' TrainTestSplit(iris)
#'
TrainTestSplit <- function(df, split = 0.75) {
if (!any("data.frame" %in% class(df))) {
exit("must be a data.frame object")
}
tr <- sample(1:nrow(df),floor(nrow(df)*split))
assign("train",df[tr, ],envir = globalenv())
assign("test",df[-tr, ],envir = globalenv())
list(df[tr, ], df[-tr, ])
}
TrainTestSplit(iris)
TrainTestSplit(iris)
head(train)
head(test)
data(iris)
set.seed(31109)
TrainTestSplit(iris)
head(train);dim(train)
head(test);dim(test)
